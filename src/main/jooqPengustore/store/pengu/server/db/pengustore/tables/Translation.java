/*
 * This file is generated by jOOQ.
 */
package store.pengu.server.db.pengustore.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import store.pengu.server.db.pengustore.DefaultSchema;
import store.pengu.server.db.pengustore.Keys;
import store.pengu.server.db.pengustore.tables.records.TranslationRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Translation extends TableImpl<TranslationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>translation</code>
     */
    public static final Translation TRANSLATION = new Translation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TranslationRecord> getRecordType() {
        return TranslationRecord.class;
    }

    /**
     * The column <code>translation.string</code>.
     */
    public final TableField<TranslationRecord, String> STRING = createField(DSL.name("string"), SQLDataType.VARCHAR(250).nullable(false), this, "");

    /**
     * The column <code>translation.translation</code>.
     */
    public final TableField<TranslationRecord, String> TRANSLATION_ = createField(DSL.name("translation"), SQLDataType.VARCHAR(250).defaultValue(DSL.inline("NULL", SQLDataType.VARCHAR)), this, "");

    private Translation(Name alias, Table<TranslationRecord> aliased) {
        this(alias, aliased, null);
    }

    private Translation(Name alias, Table<TranslationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>translation</code> table reference
     */
    public Translation(String alias) {
        this(DSL.name(alias), TRANSLATION);
    }

    /**
     * Create an aliased <code>translation</code> table reference
     */
    public Translation(Name alias) {
        this(alias, TRANSLATION);
    }

    /**
     * Create a <code>translation</code> table reference
     */
    public Translation() {
        this(DSL.name("translation"), null);
    }

    public <O extends Record> Translation(Table<O> child, ForeignKey<O, TranslationRecord> key) {
        super(child, key, TRANSLATION);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<TranslationRecord> getPrimaryKey() {
        return Keys.KEY_TRANSLATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<TranslationRecord>> getKeys() {
        return Arrays.<UniqueKey<TranslationRecord>>asList(Keys.KEY_TRANSLATION_PRIMARY);
    }

    @Override
    public Translation as(String alias) {
        return new Translation(DSL.name(alias), this);
    }

    @Override
    public Translation as(Name alias) {
        return new Translation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Translation rename(String name) {
        return new Translation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Translation rename(Name name) {
        return new Translation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
