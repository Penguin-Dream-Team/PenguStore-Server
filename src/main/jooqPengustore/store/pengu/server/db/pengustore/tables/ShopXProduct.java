/*
 * This file is generated by jOOQ.
 */
package store.pengu.server.db.pengustore.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import store.pengu.server.db.pengustore.DefaultSchema;
import store.pengu.server.db.pengustore.Keys;
import store.pengu.server.db.pengustore.tables.records.ShopXProductRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShopXProduct extends TableImpl<ShopXProductRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shop_x_product</code>
     */
    public static final ShopXProduct SHOP_X_PRODUCT = new ShopXProduct();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShopXProductRecord> getRecordType() {
        return ShopXProductRecord.class;
    }

    /**
     * The column <code>shop_x_product.shop_id</code>.
     */
    public final TableField<ShopXProductRecord, Long> SHOP_ID = createField(DSL.name("shop_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>shop_x_product.product_id</code>.
     */
    public final TableField<ShopXProductRecord, Long> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>shop_x_product.price</code>.
     */
    public final TableField<ShopXProductRecord, Double> PRICE = createField(DSL.name("price"), SQLDataType.DOUBLE.nullable(false), this, "");

    private ShopXProduct(Name alias, Table<ShopXProductRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShopXProduct(Name alias, Table<ShopXProductRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shop_x_product</code> table reference
     */
    public ShopXProduct(String alias) {
        this(DSL.name(alias), SHOP_X_PRODUCT);
    }

    /**
     * Create an aliased <code>shop_x_product</code> table reference
     */
    public ShopXProduct(Name alias) {
        this(alias, SHOP_X_PRODUCT);
    }

    /**
     * Create a <code>shop_x_product</code> table reference
     */
    public ShopXProduct() {
        this(DSL.name("shop_x_product"), null);
    }

    public <O extends Record> ShopXProduct(Table<O> child, ForeignKey<O, ShopXProductRecord> key) {
        super(child, key, SHOP_X_PRODUCT);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ShopXProductRecord> getPrimaryKey() {
        return Keys.KEY_SHOP_X_PRODUCT_PRIMARY;
    }

    @Override
    public List<UniqueKey<ShopXProductRecord>> getKeys() {
        return Arrays.<UniqueKey<ShopXProductRecord>>asList(Keys.KEY_SHOP_X_PRODUCT_PRIMARY);
    }

    @Override
    public ShopXProduct as(String alias) {
        return new ShopXProduct(DSL.name(alias), this);
    }

    @Override
    public ShopXProduct as(Name alias) {
        return new ShopXProduct(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopXProduct rename(String name) {
        return new ShopXProduct(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShopXProduct rename(Name name) {
        return new ShopXProduct(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Double> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
