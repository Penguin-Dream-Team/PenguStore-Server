/*
 * This file is generated by jOOQ.
 */
package store.pengu.server.db.pengustore.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import store.pengu.server.db.pengustore.DefaultSchema;
import store.pengu.server.db.pengustore.Indexes;
import store.pengu.server.db.pengustore.Keys;
import store.pengu.server.db.pengustore.tables.records.LocalProductImagesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LocalProductImages extends TableImpl<LocalProductImagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>local_product_images</code>
     */
    public static final LocalProductImages LOCAL_PRODUCT_IMAGES = new LocalProductImages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LocalProductImagesRecord> getRecordType() {
        return LocalProductImagesRecord.class;
    }

    /**
     * The column <code>local_product_images.id</code>.
     */
    public final TableField<LocalProductImagesRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>local_product_images.product_id</code>.
     */
    public final TableField<LocalProductImagesRecord, ULong> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINTUNSIGNED.defaultValue(DSL.inline("NULL", SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>local_product_images.image_url</code>.
     */
    public final TableField<LocalProductImagesRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private LocalProductImages(Name alias, Table<LocalProductImagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private LocalProductImages(Name alias, Table<LocalProductImagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>local_product_images</code> table reference
     */
    public LocalProductImages(String alias) {
        this(DSL.name(alias), LOCAL_PRODUCT_IMAGES);
    }

    /**
     * Create an aliased <code>local_product_images</code> table reference
     */
    public LocalProductImages(Name alias) {
        this(alias, LOCAL_PRODUCT_IMAGES);
    }

    /**
     * Create a <code>local_product_images</code> table reference
     */
    public LocalProductImages() {
        this(DSL.name("local_product_images"), null);
    }

    public <O extends Record> LocalProductImages(Table<O> child, ForeignKey<O, LocalProductImagesRecord> key) {
        super(child, key, LOCAL_PRODUCT_IMAGES);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LOCAL_PRODUCT_IMAGES_PRODUCT_ID);
    }

    @Override
    public Identity<LocalProductImagesRecord, ULong> getIdentity() {
        return (Identity<LocalProductImagesRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<LocalProductImagesRecord> getPrimaryKey() {
        return Keys.KEY_LOCAL_PRODUCT_IMAGES_PRIMARY;
    }

    @Override
    public List<UniqueKey<LocalProductImagesRecord>> getKeys() {
        return Arrays.<UniqueKey<LocalProductImagesRecord>>asList(Keys.KEY_LOCAL_PRODUCT_IMAGES_PRIMARY);
    }

    @Override
    public List<ForeignKey<LocalProductImagesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LocalProductImagesRecord, ?>>asList(Keys.LOCAL_PRODUCT_IMAGES_IBFK_1);
    }

    private transient Products _products;

    public Products products() {
        if (_products == null)
            _products = new Products(this, Keys.LOCAL_PRODUCT_IMAGES_IBFK_1);

        return _products;
    }

    @Override
    public LocalProductImages as(String alias) {
        return new LocalProductImages(DSL.name(alias), this);
    }

    @Override
    public LocalProductImages as(Name alias) {
        return new LocalProductImages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LocalProductImages rename(String name) {
        return new LocalProductImages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LocalProductImages rename(Name name) {
        return new LocalProductImages(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<ULong, ULong, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
