/*
 * This file is generated by jOOQ.
 */
package store.pengu.server.db.pengustore;


import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;

import store.pengu.server.db.pengustore.tables.Beacons;
import store.pengu.server.db.pengustore.tables.CrowdProductImages;
import store.pengu.server.db.pengustore.tables.CrowdProductPrices;
import store.pengu.server.db.pengustore.tables.LocalProductImages;
import store.pengu.server.db.pengustore.tables.LocalProductPrices;
import store.pengu.server.db.pengustore.tables.Pantries;
import store.pengu.server.db.pengustore.tables.PantriesUsers;
import store.pengu.server.db.pengustore.tables.PantryProducts;
import store.pengu.server.db.pengustore.tables.Products;
import store.pengu.server.db.pengustore.tables.ProductsUsers;
import store.pengu.server.db.pengustore.tables.Ratings;
import store.pengu.server.db.pengustore.tables.ShoppingList;
import store.pengu.server.db.pengustore.tables.ShoppingListUsers;
import store.pengu.server.db.pengustore.tables.SmartSorting;
import store.pengu.server.db.pengustore.tables.Suggestions;
import store.pengu.server.db.pengustore.tables.Translation;
import store.pengu.server.db.pengustore.tables.Users;
import store.pengu.server.db.pengustore.tables.records.BeaconsRecord;
import store.pengu.server.db.pengustore.tables.records.CrowdProductImagesRecord;
import store.pengu.server.db.pengustore.tables.records.CrowdProductPricesRecord;
import store.pengu.server.db.pengustore.tables.records.LocalProductImagesRecord;
import store.pengu.server.db.pengustore.tables.records.LocalProductPricesRecord;
import store.pengu.server.db.pengustore.tables.records.PantriesRecord;
import store.pengu.server.db.pengustore.tables.records.PantriesUsersRecord;
import store.pengu.server.db.pengustore.tables.records.PantryProductsRecord;
import store.pengu.server.db.pengustore.tables.records.ProductsRecord;
import store.pengu.server.db.pengustore.tables.records.ProductsUsersRecord;
import store.pengu.server.db.pengustore.tables.records.RatingsRecord;
import store.pengu.server.db.pengustore.tables.records.ShoppingListRecord;
import store.pengu.server.db.pengustore.tables.records.ShoppingListUsersRecord;
import store.pengu.server.db.pengustore.tables.records.SmartSortingRecord;
import store.pengu.server.db.pengustore.tables.records.SuggestionsRecord;
import store.pengu.server.db.pengustore.tables.records.TranslationRecord;
import store.pengu.server.db.pengustore.tables.records.UsersRecord;


/**
 * A class modelling foreign key relationships and constraints of tables in 
 * the default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<BeaconsRecord> KEY_BEACONS_PRIMARY = Internal.createUniqueKey(Beacons.BEACONS, DSL.name("KEY_beacons_PRIMARY"), new TableField[] { Beacons.BEACONS.LATITUDE, Beacons.BEACONS.LONGITUDE }, true);
    public static final UniqueKey<CrowdProductImagesRecord> KEY_CROWD_PRODUCT_IMAGES_PRIMARY = Internal.createUniqueKey(CrowdProductImages.CROWD_PRODUCT_IMAGES, DSL.name("KEY_crowd_product_images_PRIMARY"), new TableField[] { CrowdProductImages.CROWD_PRODUCT_IMAGES.ID }, true);
    public static final UniqueKey<CrowdProductPricesRecord> KEY_CROWD_PRODUCT_PRICES_PRIMARY = Internal.createUniqueKey(CrowdProductPrices.CROWD_PRODUCT_PRICES, DSL.name("KEY_crowd_product_prices_PRIMARY"), new TableField[] { CrowdProductPrices.CROWD_PRODUCT_PRICES.BARCODE, CrowdProductPrices.CROWD_PRODUCT_PRICES.LATITUDE, CrowdProductPrices.CROWD_PRODUCT_PRICES.LONGITUDE }, true);
    public static final UniqueKey<LocalProductImagesRecord> KEY_LOCAL_PRODUCT_IMAGES_PRIMARY = Internal.createUniqueKey(LocalProductImages.LOCAL_PRODUCT_IMAGES, DSL.name("KEY_local_product_images_PRIMARY"), new TableField[] { LocalProductImages.LOCAL_PRODUCT_IMAGES.ID }, true);
    public static final UniqueKey<LocalProductPricesRecord> KEY_LOCAL_PRODUCT_PRICES_PRIMARY = Internal.createUniqueKey(LocalProductPrices.LOCAL_PRODUCT_PRICES, DSL.name("KEY_local_product_prices_PRIMARY"), new TableField[] { LocalProductPrices.LOCAL_PRODUCT_PRICES.PRODUCT_ID, LocalProductPrices.LOCAL_PRODUCT_PRICES.LATITUDE, LocalProductPrices.LOCAL_PRODUCT_PRICES.LONGITUDE }, true);
    public static final UniqueKey<PantriesRecord> KEY_PANTRIES_CODE = Internal.createUniqueKey(Pantries.PANTRIES, DSL.name("KEY_pantries_code"), new TableField[] { Pantries.PANTRIES.CODE }, true);
    public static final UniqueKey<PantriesRecord> KEY_PANTRIES_PRIMARY = Internal.createUniqueKey(Pantries.PANTRIES, DSL.name("KEY_pantries_PRIMARY"), new TableField[] { Pantries.PANTRIES.ID }, true);
    public static final UniqueKey<PantriesUsersRecord> KEY_PANTRIES_USERS_PRIMARY = Internal.createUniqueKey(PantriesUsers.PANTRIES_USERS, DSL.name("KEY_pantries_users_PRIMARY"), new TableField[] { PantriesUsers.PANTRIES_USERS.PANTRY_ID, PantriesUsers.PANTRIES_USERS.USER_ID }, true);
    public static final UniqueKey<PantryProductsRecord> KEY_PANTRY_PRODUCTS_PRIMARY = Internal.createUniqueKey(PantryProducts.PANTRY_PRODUCTS, DSL.name("KEY_pantry_products_PRIMARY"), new TableField[] { PantryProducts.PANTRY_PRODUCTS.PANTRY_ID, PantryProducts.PANTRY_PRODUCTS.PRODUCT_ID }, true);
    public static final UniqueKey<ProductsRecord> KEY_PRODUCTS_BARCODE = Internal.createUniqueKey(Products.PRODUCTS, DSL.name("KEY_products_barcode"), new TableField[] { Products.PRODUCTS.BARCODE }, true);
    public static final UniqueKey<ProductsRecord> KEY_PRODUCTS_PRIMARY = Internal.createUniqueKey(Products.PRODUCTS, DSL.name("KEY_products_PRIMARY"), new TableField[] { Products.PRODUCTS.ID }, true);
    public static final UniqueKey<ProductsUsersRecord> KEY_PRODUCTS_USERS_PRIMARY = Internal.createUniqueKey(ProductsUsers.PRODUCTS_USERS, DSL.name("KEY_products_users_PRIMARY"), new TableField[] { ProductsUsers.PRODUCTS_USERS.PRODUCT_ID, ProductsUsers.PRODUCTS_USERS.USER_ID }, true);
    public static final UniqueKey<RatingsRecord> KEY_RATINGS_PRIMARY = Internal.createUniqueKey(Ratings.RATINGS, DSL.name("KEY_ratings_PRIMARY"), new TableField[] { Ratings.RATINGS.USER_ID, Ratings.RATINGS.BARCODE }, true);
    public static final UniqueKey<ShoppingListRecord> KEY_SHOPPING_LIST_CODE = Internal.createUniqueKey(ShoppingList.SHOPPING_LIST, DSL.name("KEY_shopping_list_code"), new TableField[] { ShoppingList.SHOPPING_LIST.CODE }, true);
    public static final UniqueKey<ShoppingListRecord> KEY_SHOPPING_LIST_PRIMARY = Internal.createUniqueKey(ShoppingList.SHOPPING_LIST, DSL.name("KEY_shopping_list_PRIMARY"), new TableField[] { ShoppingList.SHOPPING_LIST.ID }, true);
    public static final UniqueKey<ShoppingListUsersRecord> KEY_SHOPPING_LIST_USERS_PRIMARY = Internal.createUniqueKey(ShoppingListUsers.SHOPPING_LIST_USERS, DSL.name("KEY_shopping_list_users_PRIMARY"), new TableField[] { ShoppingListUsers.SHOPPING_LIST_USERS.SHOPPING_LIST_ID, ShoppingListUsers.SHOPPING_LIST_USERS.USER_ID }, true);
    public static final UniqueKey<SmartSortingRecord> KEY_SMART_SORTING_PRIMARY = Internal.createUniqueKey(SmartSorting.SMART_SORTING, DSL.name("KEY_smart_sorting_PRIMARY"), new TableField[] { SmartSorting.SMART_SORTING.ROW_NUMBER, SmartSorting.SMART_SORTING.COL_NUMBER }, true);
    public static final UniqueKey<SuggestionsRecord> KEY_SUGGESTIONS_PRIMARY = Internal.createUniqueKey(Suggestions.SUGGESTIONS, DSL.name("KEY_suggestions_PRIMARY"), new TableField[] { Suggestions.SUGGESTIONS.ROW_NUMBER, Suggestions.SUGGESTIONS.COL_NUMBER }, true);
    public static final UniqueKey<TranslationRecord> KEY_TRANSLATION_PRIMARY = Internal.createUniqueKey(Translation.TRANSLATION, DSL.name("KEY_translation_PRIMARY"), new TableField[] { Translation.TRANSLATION.STRING }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_PRIMARY = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_PRIMARY"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<UsersRecord> KEY_USERS_USERNAME = Internal.createUniqueKey(Users.USERS, DSL.name("KEY_users_username"), new TableField[] { Users.USERS.USERNAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<LocalProductImagesRecord, ProductsRecord> LOCAL_PRODUCT_IMAGES_IBFK_1 = Internal.createForeignKey(LocalProductImages.LOCAL_PRODUCT_IMAGES, DSL.name("local_product_images_ibfk_1"), new TableField[] { LocalProductImages.LOCAL_PRODUCT_IMAGES.PRODUCT_ID }, Keys.KEY_PRODUCTS_PRIMARY, new TableField[] { Products.PRODUCTS.ID }, true);
    public static final ForeignKey<LocalProductPricesRecord, ProductsRecord> LOCAL_PRODUCT_PRICES_IBFK_1 = Internal.createForeignKey(LocalProductPrices.LOCAL_PRODUCT_PRICES, DSL.name("local_product_prices_ibfk_1"), new TableField[] { LocalProductPrices.LOCAL_PRODUCT_PRICES.PRODUCT_ID }, Keys.KEY_PRODUCTS_PRIMARY, new TableField[] { Products.PRODUCTS.ID }, true);
    public static final ForeignKey<PantriesUsersRecord, PantriesRecord> PANTRIES_USERS_IBFK_1 = Internal.createForeignKey(PantriesUsers.PANTRIES_USERS, DSL.name("pantries_users_ibfk_1"), new TableField[] { PantriesUsers.PANTRIES_USERS.PANTRY_ID }, Keys.KEY_PANTRIES_PRIMARY, new TableField[] { Pantries.PANTRIES.ID }, true);
    public static final ForeignKey<PantriesUsersRecord, UsersRecord> PANTRIES_USERS_IBFK_2 = Internal.createForeignKey(PantriesUsers.PANTRIES_USERS, DSL.name("pantries_users_ibfk_2"), new TableField[] { PantriesUsers.PANTRIES_USERS.USER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<PantryProductsRecord, PantriesRecord> PANTRY_PRODUCTS_IBFK_1 = Internal.createForeignKey(PantryProducts.PANTRY_PRODUCTS, DSL.name("pantry_products_ibfk_1"), new TableField[] { PantryProducts.PANTRY_PRODUCTS.PANTRY_ID }, Keys.KEY_PANTRIES_PRIMARY, new TableField[] { Pantries.PANTRIES.ID }, true);
    public static final ForeignKey<PantryProductsRecord, ProductsRecord> PANTRY_PRODUCTS_IBFK_2 = Internal.createForeignKey(PantryProducts.PANTRY_PRODUCTS, DSL.name("pantry_products_ibfk_2"), new TableField[] { PantryProducts.PANTRY_PRODUCTS.PRODUCT_ID }, Keys.KEY_PRODUCTS_PRIMARY, new TableField[] { Products.PRODUCTS.ID }, true);
    public static final ForeignKey<ProductsUsersRecord, ProductsRecord> PRODUCTS_USERS_IBFK_1 = Internal.createForeignKey(ProductsUsers.PRODUCTS_USERS, DSL.name("products_users_ibfk_1"), new TableField[] { ProductsUsers.PRODUCTS_USERS.PRODUCT_ID }, Keys.KEY_PRODUCTS_PRIMARY, new TableField[] { Products.PRODUCTS.ID }, true);
    public static final ForeignKey<ProductsUsersRecord, UsersRecord> PRODUCTS_USERS_IBFK_2 = Internal.createForeignKey(ProductsUsers.PRODUCTS_USERS, DSL.name("products_users_ibfk_2"), new TableField[] { ProductsUsers.PRODUCTS_USERS.USER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<RatingsRecord, UsersRecord> RATINGS_IBFK_1 = Internal.createForeignKey(Ratings.RATINGS, DSL.name("ratings_ibfk_1"), new TableField[] { Ratings.RATINGS.USER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<ShoppingListUsersRecord, ShoppingListRecord> SHOPPING_LIST_USERS_IBFK_1 = Internal.createForeignKey(ShoppingListUsers.SHOPPING_LIST_USERS, DSL.name("shopping_list_users_ibfk_1"), new TableField[] { ShoppingListUsers.SHOPPING_LIST_USERS.SHOPPING_LIST_ID }, Keys.KEY_SHOPPING_LIST_PRIMARY, new TableField[] { ShoppingList.SHOPPING_LIST.ID }, true);
    public static final ForeignKey<ShoppingListUsersRecord, UsersRecord> SHOPPING_LIST_USERS_IBFK_2 = Internal.createForeignKey(ShoppingListUsers.SHOPPING_LIST_USERS, DSL.name("shopping_list_users_ibfk_2"), new TableField[] { ShoppingListUsers.SHOPPING_LIST_USERS.USER_ID }, Keys.KEY_USERS_PRIMARY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<SmartSortingRecord, ProductsRecord> SMART_SORTING_IBFK_1 = Internal.createForeignKey(SmartSorting.SMART_SORTING, DSL.name("smart_sorting_ibfk_1"), new TableField[] { SmartSorting.SMART_SORTING.ROW_NUMBER }, Keys.KEY_PRODUCTS_PRIMARY, new TableField[] { Products.PRODUCTS.ID }, true);
    public static final ForeignKey<SmartSortingRecord, ProductsRecord> SMART_SORTING_IBFK_2 = Internal.createForeignKey(SmartSorting.SMART_SORTING, DSL.name("smart_sorting_ibfk_2"), new TableField[] { SmartSorting.SMART_SORTING.COL_NUMBER }, Keys.KEY_PRODUCTS_PRIMARY, new TableField[] { Products.PRODUCTS.ID }, true);
    public static final ForeignKey<SuggestionsRecord, ProductsRecord> SUGGESTIONS_IBFK_1 = Internal.createForeignKey(Suggestions.SUGGESTIONS, DSL.name("suggestions_ibfk_1"), new TableField[] { Suggestions.SUGGESTIONS.ROW_NUMBER }, Keys.KEY_PRODUCTS_PRIMARY, new TableField[] { Products.PRODUCTS.ID }, true);
    public static final ForeignKey<SuggestionsRecord, ProductsRecord> SUGGESTIONS_IBFK_2 = Internal.createForeignKey(Suggestions.SUGGESTIONS, DSL.name("suggestions_ibfk_2"), new TableField[] { Suggestions.SUGGESTIONS.COL_NUMBER }, Keys.KEY_PRODUCTS_PRIMARY, new TableField[] { Products.PRODUCTS.ID }, true);
}
