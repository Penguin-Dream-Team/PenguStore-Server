/*
 * This file is generated by jOOQ.
 */
package store.pengu.server.db.pengustore.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import store.pengu.server.db.pengustore.DefaultSchema;
import store.pengu.server.db.pengustore.Keys;
import store.pengu.server.db.pengustore.tables.records.ProductXPantryRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductXPantry extends TableImpl<ProductXPantryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>product_x_pantry</code>
     */
    public static final ProductXPantry PRODUCT_X_PANTRY = new ProductXPantry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductXPantryRecord> getRecordType() {
        return ProductXPantryRecord.class;
    }

    /**
     * The column <code>product_x_pantry.pantry_id</code>.
     */
    public final TableField<ProductXPantryRecord, Long> PANTRY_ID = createField(DSL.name("pantry_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>product_x_pantry.product_id</code>.
     */
    public final TableField<ProductXPantryRecord, Long> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>product_x_pantry.have_qty</code>.
     */
    public final TableField<ProductXPantryRecord, Integer> HAVE_QTY = createField(DSL.name("have_qty"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>product_x_pantry.want_qty</code>.
     */
    public final TableField<ProductXPantryRecord, Integer> WANT_QTY = createField(DSL.name("want_qty"), SQLDataType.INTEGER.nullable(false), this, "");

    private ProductXPantry(Name alias, Table<ProductXPantryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductXPantry(Name alias, Table<ProductXPantryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>product_x_pantry</code> table reference
     */
    public ProductXPantry(String alias) {
        this(DSL.name(alias), PRODUCT_X_PANTRY);
    }

    /**
     * Create an aliased <code>product_x_pantry</code> table reference
     */
    public ProductXPantry(Name alias) {
        this(alias, PRODUCT_X_PANTRY);
    }

    /**
     * Create a <code>product_x_pantry</code> table reference
     */
    public ProductXPantry() {
        this(DSL.name("product_x_pantry"), null);
    }

    public <O extends Record> ProductXPantry(Table<O> child, ForeignKey<O, ProductXPantryRecord> key) {
        super(child, key, PRODUCT_X_PANTRY);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<ProductXPantryRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCT_X_PANTRY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProductXPantryRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductXPantryRecord>>asList(Keys.KEY_PRODUCT_X_PANTRY_PRIMARY);
    }

    @Override
    public ProductXPantry as(String alias) {
        return new ProductXPantry(DSL.name(alias), this);
    }

    @Override
    public ProductXPantry as(Name alias) {
        return new ProductXPantry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductXPantry rename(String name) {
        return new ProductXPantry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductXPantry rename(Name name) {
        return new ProductXPantry(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
