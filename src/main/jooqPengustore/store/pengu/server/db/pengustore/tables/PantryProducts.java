/*
 * This file is generated by jOOQ.
 */
package store.pengu.server.db.pengustore.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import store.pengu.server.db.pengustore.DefaultSchema;
import store.pengu.server.db.pengustore.Indexes;
import store.pengu.server.db.pengustore.Keys;
import store.pengu.server.db.pengustore.tables.records.PantryProductsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PantryProducts extends TableImpl<PantryProductsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pantry_products</code>
     */
    public static final PantryProducts PANTRY_PRODUCTS = new PantryProducts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PantryProductsRecord> getRecordType() {
        return PantryProductsRecord.class;
    }

    /**
     * The column <code>pantry_products.pantry_id</code>.
     */
    public final TableField<PantryProductsRecord, ULong> PANTRY_ID = createField(DSL.name("pantry_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>pantry_products.product_id</code>.
     */
    public final TableField<PantryProductsRecord, ULong> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>pantry_products.have_qty</code>.
     */
    public final TableField<PantryProductsRecord, Integer> HAVE_QTY = createField(DSL.name("have_qty"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>pantry_products.want_qty</code>.
     */
    public final TableField<PantryProductsRecord, Integer> WANT_QTY = createField(DSL.name("want_qty"), SQLDataType.INTEGER.nullable(false), this, "");

    private PantryProducts(Name alias, Table<PantryProductsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PantryProducts(Name alias, Table<PantryProductsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pantry_products</code> table reference
     */
    public PantryProducts(String alias) {
        this(DSL.name(alias), PANTRY_PRODUCTS);
    }

    /**
     * Create an aliased <code>pantry_products</code> table reference
     */
    public PantryProducts(Name alias) {
        this(alias, PANTRY_PRODUCTS);
    }

    /**
     * Create a <code>pantry_products</code> table reference
     */
    public PantryProducts() {
        this(DSL.name("pantry_products"), null);
    }

    public <O extends Record> PantryProducts(Table<O> child, ForeignKey<O, PantryProductsRecord> key) {
        super(child, key, PANTRY_PRODUCTS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PANTRY_PRODUCTS_PRODUCT_ID);
    }

    @Override
    public UniqueKey<PantryProductsRecord> getPrimaryKey() {
        return Keys.KEY_PANTRY_PRODUCTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PantryProductsRecord>> getKeys() {
        return Arrays.<UniqueKey<PantryProductsRecord>>asList(Keys.KEY_PANTRY_PRODUCTS_PRIMARY);
    }

    @Override
    public List<ForeignKey<PantryProductsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PantryProductsRecord, ?>>asList(Keys.PANTRY_PRODUCTS_IBFK_1, Keys.PANTRY_PRODUCTS_IBFK_2);
    }

    private transient Pantries _pantries;
    private transient Products _products;

    public Pantries pantries() {
        if (_pantries == null)
            _pantries = new Pantries(this, Keys.PANTRY_PRODUCTS_IBFK_1);

        return _pantries;
    }

    public Products products() {
        if (_products == null)
            _products = new Products(this, Keys.PANTRY_PRODUCTS_IBFK_2);

        return _products;
    }

    @Override
    public PantryProducts as(String alias) {
        return new PantryProducts(DSL.name(alias), this);
    }

    @Override
    public PantryProducts as(Name alias) {
        return new PantryProducts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PantryProducts rename(String name) {
        return new PantryProducts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PantryProducts rename(Name name) {
        return new PantryProducts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<ULong, ULong, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
