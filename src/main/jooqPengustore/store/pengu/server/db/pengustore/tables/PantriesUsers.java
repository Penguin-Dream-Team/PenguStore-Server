/*
 * This file is generated by jOOQ.
 */
package store.pengu.server.db.pengustore.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import store.pengu.server.db.pengustore.DefaultSchema;
import store.pengu.server.db.pengustore.Indexes;
import store.pengu.server.db.pengustore.Keys;
import store.pengu.server.db.pengustore.tables.records.PantriesUsersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PantriesUsers extends TableImpl<PantriesUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>pantries_users</code>
     */
    public static final PantriesUsers PANTRIES_USERS = new PantriesUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PantriesUsersRecord> getRecordType() {
        return PantriesUsersRecord.class;
    }

    /**
     * The column <code>pantries_users.pantry_id</code>.
     */
    public final TableField<PantriesUsersRecord, ULong> PANTRY_ID = createField(DSL.name("pantry_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>pantries_users.user_id</code>.
     */
    public final TableField<PantriesUsersRecord, ULong> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    private PantriesUsers(Name alias, Table<PantriesUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private PantriesUsers(Name alias, Table<PantriesUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>pantries_users</code> table reference
     */
    public PantriesUsers(String alias) {
        this(DSL.name(alias), PANTRIES_USERS);
    }

    /**
     * Create an aliased <code>pantries_users</code> table reference
     */
    public PantriesUsers(Name alias) {
        this(alias, PANTRIES_USERS);
    }

    /**
     * Create a <code>pantries_users</code> table reference
     */
    public PantriesUsers() {
        this(DSL.name("pantries_users"), null);
    }

    public <O extends Record> PantriesUsers(Table<O> child, ForeignKey<O, PantriesUsersRecord> key) {
        super(child, key, PANTRIES_USERS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PANTRIES_USERS_USER_ID);
    }

    @Override
    public UniqueKey<PantriesUsersRecord> getPrimaryKey() {
        return Keys.KEY_PANTRIES_USERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PantriesUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<PantriesUsersRecord>>asList(Keys.KEY_PANTRIES_USERS_PRIMARY);
    }

    @Override
    public List<ForeignKey<PantriesUsersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PantriesUsersRecord, ?>>asList(Keys.PANTRIES_USERS_IBFK_1, Keys.PANTRIES_USERS_IBFK_2);
    }

    private transient Pantries _pantries;
    private transient Users _users;

    public Pantries pantries() {
        if (_pantries == null)
            _pantries = new Pantries(this, Keys.PANTRIES_USERS_IBFK_1);

        return _pantries;
    }

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.PANTRIES_USERS_IBFK_2);

        return _users;
    }

    @Override
    public PantriesUsers as(String alias) {
        return new PantriesUsers(DSL.name(alias), this);
    }

    @Override
    public PantriesUsers as(Name alias) {
        return new PantriesUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PantriesUsers rename(String name) {
        return new PantriesUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PantriesUsers rename(Name name) {
        return new PantriesUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<ULong, ULong> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
