/*
 * This file is generated by jOOQ.
 */
package store.pengu.server.db.pengustore.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import store.pengu.server.db.pengustore.DefaultSchema;
import store.pengu.server.db.pengustore.tables.records.StatsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Stats extends TableImpl<StatsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>stats</code>
     */
    public static final Stats STATS = new Stats();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatsRecord> getRecordType() {
        return StatsRecord.class;
    }

    /**
     * The column <code>stats.num_items</code>.
     */
    public final TableField<StatsRecord, Integer> NUM_ITEMS = createField(DSL.name("num_items"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>stats.time</code>.
     */
    public final TableField<StatsRecord, Integer> TIME = createField(DSL.name("time"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>stats.latitude</code>.
     */
    public final TableField<StatsRecord, Double> LATITUDE = createField(DSL.name("latitude"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>stats.longitude</code>.
     */
    public final TableField<StatsRecord, Double> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.DOUBLE.nullable(false), this, "");

    private Stats(Name alias, Table<StatsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stats(Name alias, Table<StatsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>stats</code> table reference
     */
    public Stats(String alias) {
        this(DSL.name(alias), STATS);
    }

    /**
     * Create an aliased <code>stats</code> table reference
     */
    public Stats(Name alias) {
        this(alias, STATS);
    }

    /**
     * Create a <code>stats</code> table reference
     */
    public Stats() {
        this(DSL.name("stats"), null);
    }

    public <O extends Record> Stats(Table<O> child, ForeignKey<O, StatsRecord> key) {
        super(child, key, STATS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Stats as(String alias) {
        return new Stats(DSL.name(alias), this);
    }

    @Override
    public Stats as(Name alias) {
        return new Stats(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stats rename(String name) {
        return new Stats(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stats rename(Name name) {
        return new Stats(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Double, Double> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
