/*
 * This file is generated by jOOQ.
 */
package store.pengu.server.db.pengustore.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import store.pengu.server.db.pengustore.DefaultSchema;
import store.pengu.server.db.pengustore.Keys;
import store.pengu.server.db.pengustore.tables.records.BeaconsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Beacons extends TableImpl<BeaconsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>beacons</code>
     */
    public static final Beacons BEACONS = new Beacons();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BeaconsRecord> getRecordType() {
        return BeaconsRecord.class;
    }

    /**
     * The column <code>beacons.num_items</code>.
     */
    public final TableField<BeaconsRecord, Integer> NUM_ITEMS = createField(DSL.name("num_items"), SQLDataType.INTEGER.defaultValue(DSL.inline("NULL", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>beacons.latitude</code>.
     */
    public final TableField<BeaconsRecord, Double> LATITUDE = createField(DSL.name("latitude"), SQLDataType.FLOAT.nullable(false), this, "");

    /**
     * The column <code>beacons.longitude</code>.
     */
    public final TableField<BeaconsRecord, Double> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.FLOAT.nullable(false), this, "");

    private Beacons(Name alias, Table<BeaconsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Beacons(Name alias, Table<BeaconsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>beacons</code> table reference
     */
    public Beacons(String alias) {
        this(DSL.name(alias), BEACONS);
    }

    /**
     * Create an aliased <code>beacons</code> table reference
     */
    public Beacons(Name alias) {
        this(alias, BEACONS);
    }

    /**
     * Create a <code>beacons</code> table reference
     */
    public Beacons() {
        this(DSL.name("beacons"), null);
    }

    public <O extends Record> Beacons(Table<O> child, ForeignKey<O, BeaconsRecord> key) {
        super(child, key, BEACONS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BeaconsRecord> getPrimaryKey() {
        return Keys.KEY_BEACONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<BeaconsRecord>> getKeys() {
        return Arrays.<UniqueKey<BeaconsRecord>>asList(Keys.KEY_BEACONS_PRIMARY);
    }

    @Override
    public Beacons as(String alias) {
        return new Beacons(DSL.name(alias), this);
    }

    @Override
    public Beacons as(Name alias) {
        return new Beacons(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Beacons rename(String name) {
        return new Beacons(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Beacons rename(Name name) {
        return new Beacons(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Double, Double> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
