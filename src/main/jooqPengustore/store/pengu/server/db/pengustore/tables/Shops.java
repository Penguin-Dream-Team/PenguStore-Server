/*
 * This file is generated by jOOQ.
 */
package store.pengu.server.db.pengustore.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import store.pengu.server.db.pengustore.DefaultSchema;
import store.pengu.server.db.pengustore.Keys;
import store.pengu.server.db.pengustore.tables.records.ShopsRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Shops extends TableImpl<ShopsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shops</code>
     */
    public static final Shops SHOPS = new Shops();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShopsRecord> getRecordType() {
        return ShopsRecord.class;
    }

    /**
     * The column <code>shops.shop_id</code>.
     */
    public final TableField<ShopsRecord, ULong> SHOP_ID = createField(DSL.name("shop_id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>shops.name</code>.
     */
    public final TableField<ShopsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>shops.latitude</code>.
     */
    public final TableField<ShopsRecord, Double> LATITUDE = createField(DSL.name("latitude"), SQLDataType.FLOAT.nullable(false), this, "");

    /**
     * The column <code>shops.longitude</code>.
     */
    public final TableField<ShopsRecord, Double> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.FLOAT.nullable(false), this, "");

    private Shops(Name alias, Table<ShopsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Shops(Name alias, Table<ShopsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shops</code> table reference
     */
    public Shops(String alias) {
        this(DSL.name(alias), SHOPS);
    }

    /**
     * Create an aliased <code>shops</code> table reference
     */
    public Shops(Name alias) {
        this(alias, SHOPS);
    }

    /**
     * Create a <code>shops</code> table reference
     */
    public Shops() {
        this(DSL.name("shops"), null);
    }

    public <O extends Record> Shops(Table<O> child, ForeignKey<O, ShopsRecord> key) {
        super(child, key, SHOPS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ShopsRecord, ULong> getIdentity() {
        return (Identity<ShopsRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<ShopsRecord> getPrimaryKey() {
        return Keys.KEY_SHOPS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ShopsRecord>> getKeys() {
        return Arrays.<UniqueKey<ShopsRecord>>asList(Keys.KEY_SHOPS_PRIMARY);
    }

    @Override
    public Shops as(String alias) {
        return new Shops(DSL.name(alias), this);
    }

    @Override
    public Shops as(Name alias) {
        return new Shops(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Shops rename(String name) {
        return new Shops(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Shops rename(Name name) {
        return new Shops(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<ULong, String, Double, Double> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
