/*
 * This file is generated by jOOQ.
 */
package store.pengu.server.db.pengustore.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import store.pengu.server.db.pengustore.DefaultSchema;
import store.pengu.server.db.pengustore.Keys;
import store.pengu.server.db.pengustore.tables.records.LocalProductPricesRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LocalProductPrices extends TableImpl<LocalProductPricesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>local_product_prices</code>
     */
    public static final LocalProductPrices LOCAL_PRODUCT_PRICES = new LocalProductPrices();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LocalProductPricesRecord> getRecordType() {
        return LocalProductPricesRecord.class;
    }

    /**
     * The column <code>local_product_prices.product_id</code>.
     */
    public final TableField<LocalProductPricesRecord, ULong> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>local_product_prices.price</code>.
     */
    public final TableField<LocalProductPricesRecord, Double> PRICE = createField(DSL.name("price"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>local_product_prices.latitude</code>.
     */
    public final TableField<LocalProductPricesRecord, Double> LATITUDE = createField(DSL.name("latitude"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>local_product_prices.longitude</code>.
     */
    public final TableField<LocalProductPricesRecord, Double> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.DOUBLE.nullable(false), this, "");

    private LocalProductPrices(Name alias, Table<LocalProductPricesRecord> aliased) {
        this(alias, aliased, null);
    }

    private LocalProductPrices(Name alias, Table<LocalProductPricesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>local_product_prices</code> table reference
     */
    public LocalProductPrices(String alias) {
        this(DSL.name(alias), LOCAL_PRODUCT_PRICES);
    }

    /**
     * Create an aliased <code>local_product_prices</code> table reference
     */
    public LocalProductPrices(Name alias) {
        this(alias, LOCAL_PRODUCT_PRICES);
    }

    /**
     * Create a <code>local_product_prices</code> table reference
     */
    public LocalProductPrices() {
        this(DSL.name("local_product_prices"), null);
    }

    public <O extends Record> LocalProductPrices(Table<O> child, ForeignKey<O, LocalProductPricesRecord> key) {
        super(child, key, LOCAL_PRODUCT_PRICES);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<LocalProductPricesRecord> getPrimaryKey() {
        return Keys.KEY_LOCAL_PRODUCT_PRICES_PRIMARY;
    }

    @Override
    public List<UniqueKey<LocalProductPricesRecord>> getKeys() {
        return Arrays.<UniqueKey<LocalProductPricesRecord>>asList(Keys.KEY_LOCAL_PRODUCT_PRICES_PRIMARY);
    }

    @Override
    public List<ForeignKey<LocalProductPricesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<LocalProductPricesRecord, ?>>asList(Keys.LOCAL_PRODUCT_PRICES_IBFK_1);
    }

    private transient Products _products;

    public Products products() {
        if (_products == null)
            _products = new Products(this, Keys.LOCAL_PRODUCT_PRICES_IBFK_1);

        return _products;
    }

    @Override
    public LocalProductPrices as(String alias) {
        return new LocalProductPrices(DSL.name(alias), this);
    }

    @Override
    public LocalProductPrices as(Name alias) {
        return new LocalProductPrices(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public LocalProductPrices rename(String name) {
        return new LocalProductPrices(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public LocalProductPrices rename(Name name) {
        return new LocalProductPrices(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<ULong, Double, Double, Double> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
