/*
 * This file is generated by jOOQ.
 */
package store.pengu.server.db.pengustore.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import store.pengu.server.db.pengustore.DefaultSchema;
import store.pengu.server.db.pengustore.Indexes;
import store.pengu.server.db.pengustore.Keys;
import store.pengu.server.db.pengustore.tables.records.ShoppingListUsersRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShoppingListUsers extends TableImpl<ShoppingListUsersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shopping_list_users</code>
     */
    public static final ShoppingListUsers SHOPPING_LIST_USERS = new ShoppingListUsers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShoppingListUsersRecord> getRecordType() {
        return ShoppingListUsersRecord.class;
    }

    /**
     * The column <code>shopping_list_users.shopping_list_id</code>.
     */
    public final TableField<ShoppingListUsersRecord, ULong> SHOPPING_LIST_ID = createField(DSL.name("shopping_list_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>shopping_list_users.user_id</code>.
     */
    public final TableField<ShoppingListUsersRecord, ULong> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    private ShoppingListUsers(Name alias, Table<ShoppingListUsersRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShoppingListUsers(Name alias, Table<ShoppingListUsersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shopping_list_users</code> table reference
     */
    public ShoppingListUsers(String alias) {
        this(DSL.name(alias), SHOPPING_LIST_USERS);
    }

    /**
     * Create an aliased <code>shopping_list_users</code> table reference
     */
    public ShoppingListUsers(Name alias) {
        this(alias, SHOPPING_LIST_USERS);
    }

    /**
     * Create a <code>shopping_list_users</code> table reference
     */
    public ShoppingListUsers() {
        this(DSL.name("shopping_list_users"), null);
    }

    public <O extends Record> ShoppingListUsers(Table<O> child, ForeignKey<O, ShoppingListUsersRecord> key) {
        super(child, key, SHOPPING_LIST_USERS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SHOPPING_LIST_USERS_USER_ID);
    }

    @Override
    public UniqueKey<ShoppingListUsersRecord> getPrimaryKey() {
        return Keys.KEY_SHOPPING_LIST_USERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ShoppingListUsersRecord>> getKeys() {
        return Arrays.<UniqueKey<ShoppingListUsersRecord>>asList(Keys.KEY_SHOPPING_LIST_USERS_PRIMARY);
    }

    @Override
    public List<ForeignKey<ShoppingListUsersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ShoppingListUsersRecord, ?>>asList(Keys.SHOPPING_LIST_USERS_IBFK_1, Keys.SHOPPING_LIST_USERS_IBFK_2);
    }

    private transient ShoppingList _shoppingList;
    private transient Users _users;

    public ShoppingList shoppingList() {
        if (_shoppingList == null)
            _shoppingList = new ShoppingList(this, Keys.SHOPPING_LIST_USERS_IBFK_1);

        return _shoppingList;
    }

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.SHOPPING_LIST_USERS_IBFK_2);

        return _users;
    }

    @Override
    public ShoppingListUsers as(String alias) {
        return new ShoppingListUsers(DSL.name(alias), this);
    }

    @Override
    public ShoppingListUsers as(Name alias) {
        return new ShoppingListUsers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShoppingListUsers rename(String name) {
        return new ShoppingListUsers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShoppingListUsers rename(Name name) {
        return new ShoppingListUsers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<ULong, ULong> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
