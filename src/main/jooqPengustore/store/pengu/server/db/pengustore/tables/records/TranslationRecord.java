/*
 * This file is generated by jOOQ.
 */
package store.pengu.server.db.pengustore.tables.records;


import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import store.pengu.server.db.pengustore.tables.Translation;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TranslationRecord extends UpdatableRecordImpl<TranslationRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>translation.string</code>.
     */
    public TranslationRecord setString(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>translation.string</code>.
     */
    public String getString() {
        return (String) get(0);
    }

    /**
     * Setter for <code>translation.translation</code>.
     */
    public TranslationRecord setTranslation(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>translation.translation</code>.
     */
    public String getTranslation() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Translation.TRANSLATION.STRING;
    }

    @Override
    public Field<String> field2() {
        return Translation.TRANSLATION.TRANSLATION_;
    }

    @Override
    public String component1() {
        return getString();
    }

    @Override
    public String component2() {
        return getTranslation();
    }

    @Override
    public String value1() {
        return getString();
    }

    @Override
    public String value2() {
        return getTranslation();
    }

    @Override
    public TranslationRecord value1(String value) {
        setString(value);
        return this;
    }

    @Override
    public TranslationRecord value2(String value) {
        setTranslation(value);
        return this;
    }

    @Override
    public TranslationRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TranslationRecord
     */
    public TranslationRecord() {
        super(Translation.TRANSLATION);
    }

    /**
     * Create a detached, initialised TranslationRecord
     */
    public TranslationRecord(String string, String translation) {
        super(Translation.TRANSLATION);

        setString(string);
        setTranslation(translation);
    }
}
