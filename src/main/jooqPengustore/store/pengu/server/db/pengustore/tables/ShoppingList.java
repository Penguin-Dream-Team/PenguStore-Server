/*
 * This file is generated by jOOQ.
 */
package store.pengu.server.db.pengustore.tables;


import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import store.pengu.server.db.pengustore.DefaultSchema;
import store.pengu.server.db.pengustore.Keys;
import store.pengu.server.db.pengustore.tables.records.ShoppingListRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ShoppingList extends TableImpl<ShoppingListRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>shopping_list</code>
     */
    public static final ShoppingList SHOPPING_LIST = new ShoppingList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ShoppingListRecord> getRecordType() {
        return ShoppingListRecord.class;
    }

    /**
     * The column <code>shopping_list.id</code>.
     */
    public final TableField<ShoppingListRecord, ULong> ID = createField(DSL.name("id"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>shopping_list.name</code>.
     */
    public final TableField<ShoppingListRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>shopping_list.latitude</code>.
     */
    public final TableField<ShoppingListRecord, Double> LATITUDE = createField(DSL.name("latitude"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>shopping_list.longitude</code>.
     */
    public final TableField<ShoppingListRecord, Double> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>shopping_list.color</code>.
     */
    public final TableField<ShoppingListRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.VARCHAR(12).nullable(false), this, "");

    private ShoppingList(Name alias, Table<ShoppingListRecord> aliased) {
        this(alias, aliased, null);
    }

    private ShoppingList(Name alias, Table<ShoppingListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>shopping_list</code> table reference
     */
    public ShoppingList(String alias) {
        this(DSL.name(alias), SHOPPING_LIST);
    }

    /**
     * Create an aliased <code>shopping_list</code> table reference
     */
    public ShoppingList(Name alias) {
        this(alias, SHOPPING_LIST);
    }

    /**
     * Create a <code>shopping_list</code> table reference
     */
    public ShoppingList() {
        this(DSL.name("shopping_list"), null);
    }

    public <O extends Record> ShoppingList(Table<O> child, ForeignKey<O, ShoppingListRecord> key) {
        super(child, key, SHOPPING_LIST);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<ShoppingListRecord, ULong> getIdentity() {
        return (Identity<ShoppingListRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<ShoppingListRecord> getPrimaryKey() {
        return Keys.KEY_SHOPPING_LIST_PRIMARY;
    }

    @Override
    public List<UniqueKey<ShoppingListRecord>> getKeys() {
        return Arrays.<UniqueKey<ShoppingListRecord>>asList(Keys.KEY_SHOPPING_LIST_PRIMARY);
    }

    @Override
    public ShoppingList as(String alias) {
        return new ShoppingList(DSL.name(alias), this);
    }

    @Override
    public ShoppingList as(Name alias) {
        return new ShoppingList(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ShoppingList rename(String name) {
        return new ShoppingList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ShoppingList rename(Name name) {
        return new ShoppingList(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<ULong, String, Double, Double, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
